#!/usr/bin/env node

  var app = require('../app');
  var debug = require('debug')('iotapp:server');
  var http = require('http');

  var Deepstream = require('deepstream.io');
  var serverData = require('../serverData');
  var publishClient = require('../socketWorker.js');

  var net = require('net');
  var randomInt = require('random-int');

  var HOST = '0.0.0.0';
  var PORT = 6969;
  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  // Create your deepstream server
  var deepstream = new Deepstream({
                      "port" : 3000,
                      "httpServer" : server
                  });
  // Pass it the existing HTTP server
  deepstream.set( 'httpServer', server );
  //deepstream.set("port", 6021);

  deepstream.on('started', () => {
    serverData.init();
  })

  // Start deepstream
  deepstream.start();

  server.listen(port);
  //server.on('error', onError);
  //server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
    
  }

  //Ana1=1346; Ana2=1808; Ana3=2; IP1=1; IP2=1; IP3=1;
  let processDataSampleForDevice = function(data) {

      

      data = data.replace(/^"(.+(?="$))"$/, '$1');
      data = data.replace(/\\"/g, '"');

      let deviceData = null;
      console.log(data);

      try {          
          deviceData = JSON.parse(data);
      }
      catch(err) {
          console.log(err);
          deviceData = {};
      }

      console.log(deviceData);

      return deviceData;
      
  }


  let socketServer = net.createServer();

  socketServer.on('error', (err) => {
          console.log('In error');
          console.log(err);
  });
  
  socketServer.on('listening', () => {
          console.log(server.address().address + ":" + server.address().port)
  });

  socketServer.on('close', () => {
      console.log(server.address().address + ":" + server.address().port)
  })
  
  socketServer.on('connection', (socket) => {
    
    socket.on('data', (data) => {
        console.log("Data received");
        let processedData = processDataSampleForDevice(new String(data));
        if (!(Object.keys(processedData).length === 0 && 
              processedData.constructor === Object)) {
              publishClient.sendMessage(JSON.stringify(processedData));
        }
    });

    socket.on('error', (err) => {
      console.log(err.toString());
    });

    socket.on('end', () => {
      console.log("ending connection");
    });

    socket.pipe(socket);

  });

  socketServer.listen(PORT,HOST);

  console.log('Server listening on ' + HOST +':'+ PORT);


